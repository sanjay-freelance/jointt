(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{35:function(e,n,r){"use strict";r.d(n,"b",(function(){return i})),r.d(n,"a",(function(){return o}));var t=r(0),a=r(13);function i(){var e=Object(t.useContext)(a.a);return[e.pageName,e.setPageName]}function o(){var e=Object(t.useContext)(a.a);return[e.description,e.setDesc]}},8:function(e,n,r){"use strict";r.r(n),r.d(n,"default",(function(){return pe}));var t=r(0),a=r.n(t),i=r(2);function o(){var e=f(["\n   margin: 0.125rem 0.125rem 0.125rem .5rem;\n"]);return o=function(){return e},e}function u(){var e=f(["\n    display: flex;\n    justify-content: flex-end;\n    padding-right: 64px;\n"]);return u=function(){return e},e}function l(){var e=f(["\n    display: flex;\n    flex-direction: column;\n    width: 60%\n"]);return l=function(){return e},e}function c(){var e=f(["\n    display: flex;\n    align-items: center;\n    justify-content: center;\n"]);return c=function(){return e},e}function f(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var d=Object(i.a)("div")(c()),s=Object(i.a)("form").attrs((function(){return{className:"flex-form"}}))(l()),m=Object(i.a)("div")(u()),v=Object(i.a)("button").attrs((function(){return{className:"form-button"}}))(o());function p(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],t=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(t=(o=u.next()).done)&&(r.push(o.value),!n||r.length!==n);t=!0);}catch(e){a=!0,i=e}finally{try{t||null==u.return||u.return()}finally{if(a)throw i}}return r}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return b(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return b(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}function g(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function y(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?g(Object(r),!0).forEach((function(n){h(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function h(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}var O=function(e,n,r,t){var a=e.name,i=e.required,o=e.label;if(e.readOnly)return null;var u=r?r[a]:null;if(!i&&!r)return null;var l="",c=!0;if(n){if(u){var f=u.pattern,d=u.customValidator;"string"==typeof n&&f&&f.regex&&!new RegExp(f.regex).test(n)?(c=!1,l=f.message):d&&d.predicate&&!d.predicate(n)&&(c=!1,l=d.message)}}else i&&(c=!1,l="Enter ".concat(o));return{isValid:c,validationMessage:l,instantValidation:!(!c&&t)}},j=function(e,n,r){var t=e?Object.keys(e):[];if(r){for(var a=0;a<t.length;a++){var i=t[a],o=e[i],u=n(o);if(void 0!==u)return u}return!0}var l={};return t.map((function(r){var t=e[r];l[r]=n(t)})),l},w=function(e,n,r){return j(e,(function(e){var t=y({},e);t.name===n&&Object.keys(r).forEach((function(e){t[e]=r[e]}));return t}))};function x(e,n){var r=p(Object(t.useState)(e),2),a=r[0],i=r[1],o=p(Object(t.useState)(!1),2),u=o[0],l=o[1];Object(t.useEffect)((function(){var r=!0,t=j(e,(function(e){var t=y({},e),a=O(e,e.value,n,!0);return a&&(Object.assign(t,a),a.isValid||(r=!1)),t}));console.log(r),i(t),l(r)}),[e]);return{formFields:a,isValid:u,handleChange:function(e,r,t){var o=e.name,u=e.required,c=e.instantValidation,f=void 0===t,d=!f&&!c,s=d&&function(e,n){return j(e,(function(e){var r=e.name,t=e.isValid;if(n!==r&&!1===t)return!1}),!0)}(a,o),m=f?null:{value:t};if(!d||(i(w(a,o,m)),u&&s)){var v=O(e,f?r:t,n);if(v){m?Object.assign(m,v):m=v;var p=function(e,n,r){return j(e,(function(e){var t=e.name,a=e.isValid;if(n!==t){if(!1===a)return!1}else if(!r)return!1}),!0)}(a,o,v.isValid);console.log(p),l(p)}return m&&!s&&i(w(a,o,m)),{fieldName:o,changes:m}}},reset:function(){i(function(e,n){return j(e,(function(e){var r=O(e,"",n,!0),t=y({},e);return e.readOnly||(t.value=""),r&&Object.assign(t,r),t}))}(a,n)),l(!1)}}}function E(){var e=C(["\n    border: 1px solid;\n    border-color: ",";\n    border-radius: 0.1875rem;\n    padding: 0.625rem;\n    margin-top: 0.375rem;\n    margin-bottom: 0.375rem;\n"]);return E=function(){return e},e}function P(){var e=C(["\n    border: 1px solid;\n    border-color: ",";\n    border-radius: 0.1875rem;\n    padding: 0.625rem;\n    margin-top: 0.375rem;\n    margin-bottom: 0.375rem;\n"]);return P=function(){return e},e}function C(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var D=Object(i.a)("input")(P(),(function(e){return e["aria-invalid"]?"red":"grey"})),S=Object(i.a)("textarea")(E(),(function(e){return e["aria-invalid"]?"red":"grey"}));function N(e){var n=e.id,r=e.name,a=e.type,i=e.hidden,o=e.value,u=e.onChange,l=e.onKeyDown,c=e.disabled,f=e.required,d=void 0!==f&&f,s=e.placeholder,m=e.invalid,v=e.onBlur,p=e.className,b="textArea"==a?S:D;return t.createElement(b,{className:p,disabled:c,type:1===i?"password":a,name:void 0===r?n:r,placeholder:s,required:d,"aria-required":d,id:n,"aria-invalid":m,value:o,onChange:function(e){return u(e.target.value)},onKeyDown:l,onBlur:v})}function A(){var e=$(["\n    position: absolute;\n    right: 0rem;\n    bottom: -0.32rem;\n    font-weight: 600;\n    text-align: center;\n    font-size: 60%;\n    padding: 0.24rem 0.4rem;\n    margin: 0rem 0.25rem;\n    color: red;\n"]);return A=function(){return e},e}function V(){var e=$(["\n    position: relative;\n"]);return V=function(){return e},e}function I(){var e=$(["\n    text-decoration: none;\n"]);return I=function(){return e},e}function z(){var e=$(["\n    color: lightgrey;\n    margin-top: 16px;\n    margin-bottom: 4px;\n"]);return z=function(){return e},e}function k(){var e=$(["\n    width: 100%\n"]);return k=function(){return e},e}function q(){var e=$(["\n    flex: 1;\n    min-width: 20rem;\n"]);return q=function(){return e},e}function B(){var e=$(["\n    width: 100%;\n    align-self: center;\n    padding-right: 0.25rem;\n"]);return B=function(){return e},e}function F(){var e=$(["\n    min-width: 16rem;\n    align-self: center;\n    padding-right: 0.25rem;\n"]);return F=function(){return e},e}function M(){var e=$(["\n    max-width: 10rem;\n    min-width: 8rem;\n    align-self: center;\n    padding-right: 0.25rem;\n"]);return M=function(){return e},e}function R(){var e=$(["\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    margin-bottom: 1.65rem;\n"]);return R=function(){return e},e}function T(){var e=$(["\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin-bottom: 1.65rem;\n"]);return T=function(){return e},e}function $(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var J=Object(i.a)("div")(T()),K=Object(i.a)("div")(R()),L=Object(i.a)("label").attrs((function(){return{className:"form-label"}}))(M()),U=Object(i.a)("div")(F()),Z=Object(i.a)("div")(B()),G=Object(i.a)("div")(q()),H=Object(i.a)("div")(k()),Q=Object(i.a)("div")(z()),W=Object(i.a)("abbr")(I()),X=Object(i.a)("div")(V()),Y=Object(i.a)("label")(A()),_=function(e){var n=e.id,r=e.field,t=e.editable,i=e.isInvalid,o=e.onChange,u=e.value,l=e.onBlur,c=r.name,f=r.label,d=r.type,s=r.required,m=r.validationMessage,v=r.description,p=r.layout;var b=v?a.a.createElement(Q,null,v):null,g="vertical"===p?K:J,y="vertical"===p?H:G,h="vertical"===p?Z:U;return a.a.createElement(g,null,a.a.createElement(h,null,a.a.createElement(L,{htmlFor:n},f,s&&a.a.createElement(W,{title:"Required"}," *")),b),a.a.createElement(y,null,i&&a.a.createElement(X,null,a.a.createElement(Y,null,m)),a.a.createElement(N,{id:n,name:c,type:d,required:s,disabled:!t,value:void 0===u?"":u,invalid:i,onChange:function(e){o(r,u,e)},onBlur:function(){l(r,u)}})))};function ee(){var e=te(["\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  padding: 32px;\n"]);return ee=function(){return e},e}function ne(){var e=te(["\n    display: flex;\n    flex-direction: column;\n"]);return ne=function(){return e},e}function re(){var e=te(["\n    display: flex;\n    flex-direction: row;\n"]);return re=function(){return e},e}function te(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var ae=Object(i.a)("div").attrs((function(){return{className:"hDiv"}}))(re()),ie=Object(i.a)("div").attrs((function(){return{className:"vDiv"}}))(ne()),oe=Object(i.a)("div").attrs((function(){return{className:"BorderedDiv"}}))(ee());function ue(e){var n=e.metaData,r=e.handleChange,t=e.editable,i=e.formId,o=e.fields,u=e.handleBlur,l=n.children,c=n.layout,f=[],d=[];return l.map((function(e){var n=e.name,l=e.type,c=e.readOnly,s=e.layout;if("group"===l)f.push(a.a.createElement(ue,{metaData:e,key:n,handleChange:r,layout:s,formId:i,fields:o,editable:t}));else{var m=o[n],v=m.isValid,p=m.instantValidation,b=t&&p&&!1===v,g=i+n,y=!c&&t,h=null,O=m.value;"pageName"===n&&console.log(m),h="text"===l||"email"===l?a.a.createElement(_,{id:g,key:n,editable:y,isInvalid:b,onChange:r,onBlur:u,value:O,field:m}):a.a.createElement(_,{id:g,key:n,editable:y,isInvalid:b,onChange:r,onBlur:u,field:e}),d.push(h)}})),"horizontal"===c?a.a.createElement(ae,null,d.length>0?a.a.createElement(oe,null,d):null,f):a.a.createElement(ie,null,d.length>0?a.a.createElement(oe,null,d):null,f)}function le(e){var n=e.id,r=e.editable,t=e.validators,i=e.onSubmit,o=(e.name,e.submitLabel),u=e.metaData,l=e.fields,c=e.handleFieldChange,f=x(l,t),p=f.formFields,b=f.isValid,g=f.handleChange,y=f.reset;console.log(b);return a.a.createElement(d,null,a.a.createElement(s,{onSubmit:function(e){e.preventDefault(),i(function(e){var n={};return e.forEach((function(e){var r=e.name,t=e.value;n[r]=t})),n}(p))},noValidate:!0},a.a.createElement(ue,{metaData:u,fields:p,handleChange:function(e,n,r){g(e,n,r),c(e,r)},handleBlur:function(e,n){g(e,n)},editable:r,formId:n}),a.a.createElement(m,null,a.a.createElement(v,{disabled:!r||!b},o||"Submit"),a.a.createElement(v,{disabled:!r,onClick:function(e){e.preventDefault(),y()}},"Reset"))))}var ce={pageName:{customValidator:{predicate:function(e){return e.length>=3},message:"Must Contain min 3 chars"}},email:{pattern:{regex:"^(([-\\w\\d]+)(\\.[-\\w\\d]+)*@([-\\w\\d]+)(\\.[-\\w\\d]+)*(\\.([a-zA-Z]{2,5}|[\\d]{1,3})){1,2})$",message:"Invalid Email Format"}}},fe={type:"group",name:"group1",layout:"vertical",children:[{type:"group",label:"group1",name:"group1",layout:"vertical",children:[{type:"text",label:"Page Name",name:"pageName",required:!0,description:"Page Name Description"},{type:"email",label:"Email",name:"email",required:!0,description:"Email Description"},{type:"file",label:"Profile Photo",name:"profilePhoto",layout:"vertical",description:"Profile Photo Description"}]},{type:"group",label:"group2",name:"group2",layout:"vertical",children:[{type:"file",label:"Cover Photo",name:"coverPhoto",description:"Cover Photo Description"}]},{type:"group",label:"group3",name:"group3",layout:"vertical",children:[{type:"text",label:"About your page",name:"aboutPage",layout:"vertical",description:"This is the first thing potential clients will see when they land on your page, so make sure you paint a compelling picture of how they can join you on this journey."}]}]},de=r(35);function se(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],t=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(t=(o=u.next()).done)&&(r.push(o.value),!n||r.length!==n);t=!0);}catch(e){a=!0,i=e}finally{try{t||null==u.return||u.return()}finally{if(a)throw i}}return r}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return me(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return me(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function me(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}function ve(e){var n={};return function e(n,r,t){n.map((function(n){var a=n.type,i=n.children,o=n.name;"group"==a?e(i,r,t):(t.hasOwnProperty(o)&&(n.value=t[o]),r[o]=n)}))}(fe.children,n,e),n}function pe(){var e=se(Object(de.b)(),2),n=e[0],r=e[1],t=se(Object(de.a)(),2),i=t[0],o=t[1];var u=ve({pageName:n,description:i});return a.a.createElement("div",{className:"basics"},a.a.createElement(le,{id:"userForm",fields:u,metaData:fe,editable:!0,validators:ce,name:"user",handleFieldChange:function(e,n){"pageName"==e.name?r(n):"description"==e.name&&o(n)},submitLabel:"Save"}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,